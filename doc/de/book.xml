<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="de">

  <bookinfo>
    <title>PHPTAL Handbuch</title>
    <subtitle><acronym>PHP</acronym> Template Attribute Language</subtitle>
    <date>2009-10-25</date>
    <author>
      <firstname>Laurent</firstname><surname>Bédubourg</surname>
      <address><email>lbedubourg@motion-twin.com</email></address>
    </author>
    <author>
      <firstname>Kornel</firstname><surname>Lesiński</surname>
      <address><email>kornel@aardvarkmedia.co.uk</email></address>
    </author>
    <author>
      <firstname>Dan</firstname><surname>Sheppard</surname>
    </author>
    <author>
      <firstname>Anton</firstname><surname>Andriyevskyy</surname>
      <othername>Valeriyevich</othername>
      <address><email>x.meglio@gmail.com</email></address>
    </author>
    <author>
      <firstname>Axel</firstname><surname>Zöllich</surname>
      <address><email>faxel@zoellich.de</email></address>
    </author>

    <revhistory id="revhistory">
      <revision>
        <revnumber>v1.7</revnumber>
        <date>2009-06-06</date>
        <authorinitials>kl</authorinitials>
        <revremark>Updates for PHPTAL 1.2.0</revremark>
      </revision>
      <revision>
        <revnumber>v1.6</revnumber>
        <date>2008-10-03</date>
        <authorinitials>kl</authorinitials>
        <revremark>Fixed errors spotted by Anton.</revremark>
      </revision>
      <revision>
        <revnumber>v1.5</revnumber>
        <date>2008-08-21</date>
        <authorinitials>kl</authorinitials>
        <revremark>Removed old defines, documented configuration methods.</revremark>
      </revision>
      <revision>
        <revnumber>v1.4</revnumber>
        <date>2008-08-18</date>
        <authorinitials>kl</authorinitials>
        <revremark>Corrections and updates for PHPTAL 1.1.13</revremark>
      </revision>
      <revision>
        <revnumber>v1.3</revnumber>
        <date>2008-01-27</date>
        <authorinitials>kl</authorinitials>
        <revremark>Updated for PHPTAL 1.1.10</revremark>
      </revision>
      <revision>
        <revnumber>v1.2</revnumber>
        <date>2005-12-10</date>
        <authorinitials>ds</authorinitials>
        <revremark>English Corrections by Dan Sheppard</revremark>
      </revision>
      <revision>
        <revnumber>v1.1</revnumber>
        <date>2005-03-29</date>
        <authorinitials>lb</authorinitials>
        <revremark>Added section about PHPTAL class</revremark>
      </revision>
      <revision>
        <revnumber>v1.0</revnumber>
        <date>2005-03-27</date>
        <authorinitials>lb</authorinitials>
        <revremark>Converted draft to docbook</revremark>
      </revision>
    </revhistory>

    <!--
    <abstract>
      <para>
      Bla bla bla PHPTAL
      </para>
    </abstract>
    -->
  </bookinfo>

  <article id="introduction">
    <title>Einleitung</title>

    <para>
    <acronym>PHPTAL</acronym> ist eine Implementierung des hervorragenden »Zope Page Template«-
    (<acronym>ZPT</acronym>-)Systems in <acronym>PHP</acronym>. <acronym>PHPTAL</acronym> unterstützt die <acronym><link linkend="tal-namespace">TAL</link></acronym>-, <acronym><link linkend="metal">METAL</link></acronym>- und <acronym><link linkend="tal-namespace">I18N</link></acronym>-Namensräume.
    </para>

    <para>
      <acronym><link linkend="phptales">PHPTALES</link></acronym> ist das Äquivalent zu <acronym>TALES</acronym>, der »Template Attribute Language Expression Syntax«. Es legt fest, wie <acronym>XML</acronym>-Attributwerte behandelt werden.
    </para>

    <para>
    Da <acronym>PHPTALES</acronym> <acronym>TALES</acronym> sehr stark ähnelt, sollte es leicht sein, Python-<acronym>TAL</acronym>-
    Vorlagen in solche für <acronym>PHP</acronym> beziehungsweise andersherum zu übertragen.
    </para>

    <para>
    Um <acronym>TAL</acronym>-konform zu sein, implementiert <acronym>PHPTAL</acronym> einen XPath-artigen Datenzugriff.
    </para>

    <para>
    <acronym>PHPTAL</acronym> ist unter der <acronym>LGPL</acronym> frei verfügbar; es wurde von Laurent Bedubourg
    <email>lbedubourg@motion-twin.com</email> entwickelt und wird von Kornel Lesiński betreut.
    </para>

  </article>

  <article id="whyusephptal">
    <title>Warum <acronym>PHPTAL?</acronym></title>

    <para>
    Wir benutzen <acronym>XML</acronym>-/<acronym>HTML</acronym>-Vorlagen (»Templates«), um Logik (weshalb wird was ausgegeben) und Darstellung (wie sieht es im Brauser aus) voneinander zu trennen. Diese Trennung hat mehr als einen Vorteil:
    </para>

    <itemizedlist>
      <listitem><para>besseres Anwendungsdesign</para></listitem>
      <listitem><para>Umstrukturierungen werden einfacher</para></listitem>
      <listitem><para>bessere Wartbarkeit</para></listitem>
      <listitem><para>das Design lässt sich leicht ändern</para></listitem>
    </itemizedlist>

    <para>
    Die meisten Vorlagensysteme (»Template-Systeme«) nutzen <sgmltag>&lt;? ?&gt;</sgmltag>-, <sgmltag>&lt;% %&gt;</sgmltag>- oder
    <sgmltag>&lt;xxx:yyy&gt;&lt;/xxx:yyy&gt;</sgmltag>-Auszeichnungen, um die Stellen zu finden, die verarbeitet werden müssen. Dadurch wird die Entwicklung des Vorlagensystems einfacher, dem (Vorlagen-) Designer wird die Arbeit aber unnötig erschwert.
    </para>

    <para>
      <acronym>TAL</acronym> versteckt seine Logik größtenteils in <acronym>XML</acronym>-Attributen und erhält dabei die Syntax und Struktur von <acronym>XHTML</acronym>. Dadurch ist eine direkte Betrachtung von <acronym>TAL</acronym>-Vorlagen in Brausern möglich (<acronym>WYSIWYG</acronym>-Editoren, unmittelbare Vorschau). Die <acronym>HTML</acronym>-Syntax-Hervorhebung (»Syntax Highlighting«) im Editor wird nicht gestört.
    </para>

    <para>
    Falls Sie schon einmal mit einem einfachen Vorlagensystem gearbeitet haben, werden Ihnen bereits Codeschnipsel begegnet sein, die ungefähr wie folgt aussehen:
    </para>

    <informalexample><programlisting language="xml"><![CDATA[<table>
  <%loop myarray as myitem %>
  <tr>
    <td><% myitem %></td>
  </tr>
  <%/loop%>
</table>
]]></programlisting></informalexample>

    <para>
    Mit <acronym>PHPTAL</acronym> können Sie das folgendermaßen schreiben:
    </para>

    <informalexample><programlisting language="xml"><![CDATA[<table>
  <tr tal:repeat="myitem myarray">
    <td tal:content="myitem">
      text replaced by the item value
    </td>
    <td tal:replace="">sample 1</td>
    <td tal:replace="">sample 2</td>
    <td tal:replace="">sample 3</td>
  </tr>
</table>
]]></programlisting></informalexample>

    <para>
      Der obige Code wird samt der enthaltenen Beispieldaten in einem normalen Brauser angezeigt werden, das heißt, dass Sie die Seite Ihren Kunden zeigen können, ohne dass auch nur eine Zeile des Codes, der das Feld <varname>myarray</varname> erzeugt, schon existieren muss.
    </para>

    <para>
    Ein weiterer großer Vorteil von <acronym>PHPTAL</acronym> ist, daß Sie von der mehr als 3-jährigen Erfahrung, der Dokumentation und der Hilfe der Zope-Gemeinschaft profitieren.
    <acronym>PHPTAL</acronym> verlässt sich auf diese Gemeinschaft, um seinen Nutzern eine große Menge nützlicher Informationen zu bieten.
    </para>

    <para>
    <acronym>PHPTAL</acronym> ist so aufgebaut, dass es für fortgeschrittene Entwickler und anspruchsvolle (d.h. ressourcenintensive) Systeme so anpassbar wie möglich ist, aber dennoch für den Anfänger durch bequeme und einfache Grundeinstellungen benutzbar bleibt (Wir haben es zumindestens probiert :).
    </para>

  </article>

  <article id="installation">
    <title>Installation</title>

    <para>
      <acronym>PHPTAL</acronym> wird als <acronym>PEAR</acronym>-Paket verteilt (siehe <ulink url="http://pear.php.net">pear.php.net</ulink>). Sie können die <acronym>PHPTAL</acronym>-Bibliothek aber auch von der <acronym>PHPTAL</acronym>-Webseite (<ulink url="http://phptal.org">phptal.org</ulink>) herunterladen.
    </para>

    <para>
      So installieren Sie <acronym>PHPTAL</acronym> via <acronym>PEAR</acronym>:
    </para>

    <informalexample><programlisting language="sh"><![CDATA[pear install http://phptal.org/latest.tar.gz
]]></programlisting></informalexample>


    <para>
      Einmal installiert, können Sie <acronym>PHPTAL</acronym> via <acronym>PEAR</acronym> leicht auf aktuellem Stand halten:
    </para>

    <informalexample><programlisting language="sh"><![CDATA[pear upgrade http://phptal.org/latest.tar.gz
]]></programlisting></informalexample>

    <para>
      Nutzen Sie <acronym>PEAR</acronym> nicht, oder ist es auf ihrem Rechner nicht installiert, können Sie auf das komprimierte Archiv ausweichen:
    </para>

    <informalexample><programlisting language="sh"><![CDATA[tar zxvf PHPTAL-X.X.X.tar.gz
cp -r PHPTAL-X.X.X/PHPTAL* /path/to/your/lib/folder
]]></programlisting></informalexample>

    <para>
      Damit wird die Datei <filename>PHPTAL.php</filename> und der zugehörige <acronym>PHPTAL</acronym>-Ordner in <filename>/path/to/your/lib/folder</filename> installiert.
    </para>

  </article>

  <article id="firstexample">
    <title>Ein erstes Beispiel</title>

    <para>
      Um einen ersten Eindruck von <acronym>PHPTAL</acronym> zu gewinnen, hier ein einfaches Beispiel statt vieler Worte.
    </para>

    <para>
      Ihre Vorlage ist ein gültiges <acronym>XML</acronym>-/<acronym>HTML</acronym>-Dokument (samt Wurzelelement). Die Datei nennen wir <filename>my_template_file.xhtml</filename>:
    </para>

    <informalexample><programlisting language="xml"><![CDATA[<?xml version="1.0"?>
<html>
  <head>
    <title tal:content="title">
      Platz für den Seitentitel
    </title>
  </head>
  <body>
    <h1 tal:content="title">Beispieltitel</h1>
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Telefonnummer</th>
        </tr>
      </thead>
      <tbody>
        <tr tal:repeat="person people">
          <td tal:content="person/name">Name der Person</td>
          <td tal:content="person/phone">Telefonnummer der Person</td>
        </tr>
        <tr tal:replace="">
          <td>Beispielname</td>
          <td>Beispielnummer</td>
        </tr>
        <tr tal:replace="">
          <td>Beispielname</td>
          <td>Beispielnummer</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
]]></programlisting></informalexample>

    <para>
      In php müssen Sie lediglich die <acronym>PHPTAL</acronym>-Bibliothek einbinden und eventuell eine Variable anpassen, um ihre Vorlage zu  individualisieren.
    </para>

    <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL.php';

// create a new template object
$template = new PHPTAL('my_template_file.xhtml');

// the Person class
class Person {
    public $name;
    public $phone;

    function Person($name, $phone) {
        $this->name = $name;
        $this->phone = $phone;
    }
}

// let's create an array of objects for test purpose
$people = array();
$people[] = new Person("bla", "0162/4578930");
$people[] = new Person("blabla", "0714/87629");
$people[] = new Person("blubb", "0102/6637912");
$people[] = new Person("blablubb", "0190/123456");

// put some data into the template context
$template->title = 'Der Titeltext';
$template->people = $people;

// execute the template
try {
    echo $template->execute();
}
catch (Exception $e){
    echo $e;
}
?>
]]></programlisting></informalexample>

    <para>
      Wenn sie das <acronym>PHP</acronym> Script ausführen, werden sie etwas ähnlich dem Folgenden erhalten.
    </para>

    <informalexample><programlisting language="xml"><![CDATA[<?xml version="1.0"?>
<html>
  <head>
    <title>Der Titeltext</title>
  </head>
  <body>
    <h1>Der Titeltext</h1>
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Telefonnummer</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>bla</td>
          <td>0162/4578930</td>
        </tr><tr> <td>blabla</td>
          <td>0714/87629</td>
        </tr><tr> <td>blubb</td>
          <td>0102/663791</td>
        </tr><tr> <td>blablubb</td>
          <td>0190/123456</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
]]></programlisting></informalexample>

    <para>
      <acronym>PHPTAL</acronym> schert sich nicht besonders um Zeilenumbrüche und Einrückungen in den Dateien, die es liest bzw. erzeugt. Möchten Sie, dass der erzeugte <acronym>HTML</acronym>-Code hübsch wird, d.h mit Zeilenumbrüchen und perfekten Einrückungen, müssen Sie ihn eventuell mit <acronym>HTML</acronym>-Tidy nachbearbeiten.
    </para>

  </article>

  <article id="attributelanguage">
    <title>Die »Template Attribute Language«</title>

    <para>
      »Template Attribute Language« (<acronym>TAL</acronym>) bedeutet ungefähr soviel wie attributbasierte Vorlagensprache. Dieser Abschnitt beschreibt <acronym>TAL</acronym> und seine Erweiterungen. Er zielt hauptsächlich auf Template-Designer ab, sollte aber auch von <acronym>PHP</acronym>-Programmierern gelesen werden.
    </para>

    <section id="attributes">
      <title>Attributrangfolge</title>

      <para>
        Es ist wichtig zu wissen, dass die Reihenfolge der <acronym>TAL</acronym>-Attribute innerhalb einer Auszeichnung bedeutungslos ist.
      </para>

      <para>
        Zum Beispiel ist
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<span tal:define="usersList application/listUsers"
      tal:condition="somecondition"
      tal:repeat="user usersList"
>…</span>
]]></programlisting></informalexample>

      <para>
        <emphasis>genau</emphasis> dasselbe wie:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<span tal:repeat="user usersList"
      tal:condition="somecondition"
      tal:define="usersList application/listUsers"
>…</span>
]]></programlisting></informalexample>

      <para>
        Die <acronym>PHPTAL</acronym>-Rangfolge enspricht der in der <acronym>TAL</acronym>-Beschreibung festgelegten Abarbeitungsreihenfolge:
      </para>

      <orderedlist>
        <listitem><para><sgmltag>define</sgmltag></para></listitem>
        <listitem><para><sgmltag>condition</sgmltag></para></listitem>
        <listitem><para><sgmltag>repeat</sgmltag></para></listitem>
        <listitem><para><sgmltag>content oder replace</sgmltag></para></listitem>
        <listitem><para><sgmltag>attributes</sgmltag></para></listitem>
        <listitem><para><sgmltag>omit-tag</sgmltag></para></listitem>
      </orderedlist>

<!-- An dieser Stelle schwierig zu verstehen, deswegen lassen wir es erst einmal weg
      <para>
      Because <acronym>PHPTAL</acronym> implements METAL and I18N, this list is completed
      as follow:
      </para>

    1.  phptal:debug
    2.  phptal:tales
    3.  phptal:omit-tag (not exactly the same position but same effect)
    4.  metal:define-macro
    5.  tal:on-error
    6.  i18n:domain
    7.  tal:define
    8.  i18n:name
    9.  i18n:translate
    10. tal:condition
    11. phptal:id
    12. tal:repeat
    13. tal:attributes
    14. tal:replace
    15. metal:use-macro
    16. metal:define-slot
    17. metal:fill-slot
    18. i18n:attributes
    19. tal:content
    20. tal:comment
-->

    </section>

    <section id="tal-namespace">
      <title><acronym>TAL</acronym>-Namensraum</title>

      <para>
        Der <acronym>URI</acronym> für diesen Namensraum lautet <code>http://xml.zope.org/namespaces/tal</code>. Um das <code>tal:</code> Attribut Präfix in <acronym>XML</acronym> zu verwenden, müssen Sie es deklarieren:
      </para>

        <informalexample><programlisting language="xml"><![CDATA[<html xmlns:tal="http://xml.zope.org/namespaces/tal" …>]]></programlisting></informalexample>

        <note>
          <para>
            PHPTAL erzwingt diese Angabe nicht.
          </para>
        </note>

      <section id="tal-define">
        <title><sgmltag>tal:define</sgmltag></title>

        <para>
          Dieses Attribut definiert eine oder mehrere Variablen, die im weiteren Verlauf in der Vorlage verwendet werden können.
        </para>

        <para>
          Es können eine oder mehrere durch Semikolon getrennte Variablen angegeben werden.
        </para>

        <para>
          Definition eines Kürzels für einen langen Pfad:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="global destname pfad/zu/einer/Variable">…</div>]]></programlisting></informalexample>

        <para>
          Mehrere Variablen zugleich definieren:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="global vname string:Hans; nname string:Meier">…</span>]]></programlisting></informalexample>

        <para>
          Beginnt eine Definition mit <code>global</code> Schlüsselwort ist die Variable dannach überall in der Vorlage und in allen Makros sichtbar. Eine globale Variablen darf später in der Vorlage auch neu definiert werden.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="global hello string:Hallo Welt"/>
            <p tal:content="hello"/>
            ]]></programlisting></informalexample>

        <para>
          Im Gegensatz dazu ist eine lokale Variable nur innerhalb der Auszeichnung sichtbar, in der Sie definiert ist.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="hello string:Hallo Welt"/>
            <p tal:content="hello"/>
            ]]></programlisting></informalexample>

        <para>
          Dieser Code liefert einen 'undefined variable'-Fehler.
        </para>

        <tip>
          <para>
            Sie können <sgmltag>tal:define</sgmltag> auch zusammen mit anderen Attributen verwenden. Es wird in jedem Fall vor allen anderen Attributen ausgewertet.
          </para>
        </tip>

        <para>
          Definition einer Zeichenkette innerhalb einer Vorlage:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="global destname string:irgendetwas">…</span>]]></programlisting></informalexample>

        <para>
          Defining a string containing another variable:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="fname string:Paul; hello string:Hello $fname! Welcome to this page" />
            ]]></programlisting></informalexample>

        <para>
          Definition einer Zeichenkette, die eine weitere Variable enthält:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="global hello string:Hallo $fname, willkommen auf dieser Seite" />]]></programlisting></informalexample>

        <para>
          Ein kleiner Trick, der den Inhalt einer Auszeichnung verwendet (für sehr komplexe Werte hilfreich):
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="global hello">Hallo ${fname}, willkommen auf dieser Seite</span>]]></programlisting></informalexample>

        <note>
          <para>
            Dieser Spezialfall funktioniert nur bei Verwendung des <code>global</code> Schlüsselwortes.
          </para>
        </note>

        <para>
          In obigen Beispielen wird die <sgmltag>&lt;span&gt;</sgmltag>-Auszeichnung in der Ausgabe nicht auftauchen, da sie weder druckbaren Inhalt noch Attribute enthält. Selbst die Meldung im letzten Beispiel wird nicht erscheinen. Sie wird von der Variablen <varname>hello</varname> geschluckt.
        </para>

        <para>
          Andererseits wird durch
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="hello string:Hallo ${fname}, willkommen auf dieser Seite" tal:content="hello" />]]></programlisting></informalexample>

        <para>
          sowohl die Variable <varname>hello</varname> gesetzt, als auch der Text ausgegeben.
        </para>

        <para>
          Der folgende Code aber ist <emphasis>nicht</emphasis> erlaubt, da <sgmltag>tal:define</sgmltag> der Variablen »hello« den Inhalt des Knotens zuweist. Der Inhalt des Knotens ist allerdings zu diesem Zeitpunkt noch unklar, da <sgmltag>tal:content</sgmltag> ihn erst später festlegt. Der tatsächliche Inhalt wird dabei wie Beispielinhalt ignoriert. <varname>hello</varname> wird nicht definiert, und Sie erhalten eine Fehlermeldung.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="hello" tal:content="hello">
              Hallo ${fname}, willkommen auf dieser Seite
            </span>
            ]]></programlisting></informalexample>

      </section>

      <section id="tal-condition">
        <title><sgmltag>tal:condition</sgmltag></title>

        <para>
          Das Element und sein Inhalt werden nur angezeigt, wenn das Ergebnis der Bedingung wahr ist.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<p tal:condition="identified"> Welcome member …  </p>
]]></programlisting></informalexample>

        <informalexample><programlisting language="xml"><![CDATA[<p tal:condition="not: identified">
  Please login before accessing this page
</p>
]]></programlisting></informalexample>

        <para>
          Wenn ihr <acronym>PHP</acronym> Unterbau ihrer Vorlage nicht genügend Methoden zu Verfügung stellt, werden Sie des öfteren auf <acronym>PHP</acronym> zurückgreifen müssen, um spezielle Bedingungen zu prüfen:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:comment="show only if more than five items in the cart"
      tal:condition="php: cart.countItems() GT 5">…</span>
]]></programlisting></informalexample>

        <para>
          Dadurch kann unerwünscht viel Logik in der Vorlage landen. Manchmal ist es daher besser, der Vorlage boolsche Ausdrücke oder Methoden anzubieten.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:condition="cart/hasEnoughItems">…</span>
]]></programlisting></informalexample>

      </section>

      <section id="tal-repeat">
        <title><sgmltag>tal:repeat</sgmltag></title>

        <para>
          Dieses Attribut arbeitet auf abzählbaren Objekten wie Feldern, assoziativen Feldern oder Objekten, die die <acronym>PHP5</acronym> <constant>Iterator</constant> Klasse implementiert.
        </para>

        <para>
          Das <sgmltag>tal:repeat</sgmltag> Attribut wiederholt seine Auszeichnung und seinen Inhalt solange, bis es am Ende der angegebenen Quelle (Feld, Objekt) angekommen ist.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<tr tal:repeat="item some/result">
  <td tal:content="item">text replaced by item</td>
</tr>
]]></programlisting></informalexample>

        <para>
          Innerhalb einer solchen Schleife können Sie mit speziellen <varname>repeat/<replaceable>*</replaceable></varname> Pfaden auf aktuelle Schleifenzustände (und die ihrer Eltern für verschachtelte Schleifen) zugreifen.
        </para>

        <para>
          In obigen Beispiel liefert
        </para>

        <itemizedlist>
          <listitem><para>
            <varname>repeat/item/key</varname>  : den Elementenschlüssel, wenn some/result eine assoziative Quelle ist (sonst den Index)
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/index</varname>  :  den Elementenindex (0 bis Gesamtanzahl-1)
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/number</varname> :  die Elementennummer (1 bis Gesamtanzahl)
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/even</varname>   :  wahr, wenn der Index des Elementes gerade ist
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/odd</varname>    :  wahr, wenn der Index des Elementes ungerade ist
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/start</varname>  :  wahr, wenn das Element das erste ist
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/end</varname>    :  wahr, wenn das Element das letzte ist
          </para></listitem>
          <listitem><para>
          <varname>repeat/item/length</varname> :  die Anzahl der Elemente in some/result
          </para></listitem>
        </itemizedlist>

        <para>
          <varname>item</varname> ist die Variable, die im <sgmltag>tal:repeat</sgmltag> Ausdruck definiert wird.
        </para>

        <para>
          <sgmltag>tal:repeat</sgmltag> wird in den meisten Fällen auf das Ergebnis einer <acronym>SQL</acronym> Datenbankabfrage angewendet werden. Der folgende Code funktioniert wenn <varname>playersRanking</varname> ein Objekt enthält, das das <acronym>PHP</acronym> <constant>Iterator</constant> Interface implementiert:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Player</th>
      <th>Score</th>
    </tr>
  </thead>
  <tbody>
    <tr tal:repeat="ranking playersRanking">
      <td tal:content="ranking/position"/>
      <td tal:content="ranking/player"/>
      <td tal:content="ranking/score"/>
    </tr>
  </tbody>
</table>
]]></programlisting></informalexample>

      </section>

      <section id="tal-omit-tag">
        <title><sgmltag>tal:omit-tag</sgmltag></title>

        <para>
          Dieses Attribut gibt dem <acronym>PHPTAL</acronym> Parser auf, die Anfangs- und Endauszeichnung des umgebenden Elementes zu ignorieren und nur den Inhalt auszugeben.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:omit-tag="condition">
  if the condition is true, then only this text will appear and span open and close will be removed
</span>
]]></programlisting></informalexample>

        <para>
          Ergibt:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[only this text will appear, span open and close will be removed
]]></programlisting></informalexample>

        <para>
          Dieses Attribut ist nützlich, wenn Sie ein Auszeichnung wahlweise darstellen möchten oder nicht. Z.B. kann ein Text in Abhängigkeit von einer Bedingung einmal als Text und einmal als Verweis ausgezeichnet werden.
        </para>

        <para>
          Wenn Sie ein Element benötigen, das niemals ausgegeben wird, können Sie dazu  <sgmltag>tal:block</sgmltag> verwenden
        </para>
        <informalexample><programlisting language="xml"><![CDATA[<tal:block tal:repeat="x php:range(1,10)">only this text will appear, ten times.</tal:block>
]]></programlisting></informalexample>

      </section>

      <section id="tal-replace">
        <title><sgmltag>tal:replace</sgmltag></title>

        <para>
          Dieses Attribut ersetzt die gesamte Auszeichnung durch den angegebenen Wert, oder durch nichts, wenn kein Wert agegeben wird.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:replace="string:this beautiful string">
  this ugly string and span
</span>
]]></programlisting></informalexample>

        <para>
          Ergibt:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[this beautiful string
]]></programlisting></informalexample>

        <para>
          <sgmltag>tal:replace</sgmltag> kann auch verwendet werden und Beispiele in Vorlagen zu schreiben die in der endgültigen Ausgabe nicht enhalten sein sollen.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<table>
  <tr tal:repeat="item myresult">
    <td tal:content="item">item value</td>
  </tr>
  <tr tal:replace="">
    <td>sample 1</td>
  </tr>
  <tr tal:replace="">
    <td>sample 2</td>
  </tr>
</table>
]]></programlisting></informalexample>

      </section>

      <section id="tal-content">
        <title><sgmltag>tal:content</sgmltag></title>

        <para>
          Dieses Attribut ersetzt den Auszeichnungsinhalt durch das Ergebnis des enthaltenen Ausdrucks.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="myvar string:my string"/>
<span tal:content="myvar">will be replaced</span>
]]></programlisting></informalexample>

        <para>
          Ergibt:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span>my string</span>
]]></programlisting></informalexample>

      </section>

      <section id="tal-attributes">
        <title><sgmltag>tal:attributes</sgmltag></title>

        <para>
          Mit <sgmltag>tal:attributes</sgmltag> können <acronym>HTML</acronym> Attribute gesetzt oder verändert werden.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<a href="http://www.foo.com" title="some foo link"
   tal:attributes="href somelink/href; title somelink/title"
  tal:content="somelink/text"
>sample link</a>
]]></programlisting></informalexample>

        <para>
        Wobei '<varname>somelink</varname>' aus folgendem besteht:
        </para>

        <informalexample><programlisting language="php"><![CDATA[$somelink->href = "http://www.google.com";
$somelink->title = "google search engine";
$somelink->text = "the google search engine";
]]></programlisting></informalexample>

        <para>
          Ergibt:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<a href="http://www.google.com"
title="google search engine">the google search engine</a>
]]></programlisting></informalexample>

        <para>Das Semikolon (<literal>;</literal>) trennt einzelne Attribute. Möchten Sie ein Semikolon ausgeben, so müssen Sie es verdoppeln (<literal>;;</literal>).</para>

        <para>
          Ein etwas komplexeres Beispiel zu <sgmltag>tal:repeat</sgmltag>:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<tr tal:repeat="ranking playerRankings"
    tal:attributes="class php: repeat.ranking.odd ? 'odd' : NULL">
    …
</tr>
]]></programlisting></informalexample>

        <para>
          Der <code>php:</code> Operator wird später genauer erklärt werden. Hier wird, wenn die Zeilennummer ungerade ist, <sgmltag>tr</sgmltag> ein <sgmltag>class</sgmltag> Attribut mit 'odd' als Wert zugewiesen sonst wird kein <sgmltag>class</sgmltag> Attribut gesetzt.
        </para>

        <para>
        "<code>condition ? then : else</code>" ist ein normales <acronym>PHP</acronym> Konstrukt, daß vorsichtig verwendet werden muß, sich aber in mehr als einer Situation als nützlich erweist.
        </para>

        <para>
          Ein besserer Weg um dasselbe Ergebnis zu erhalten ist es, den <acronym>PHP</acronym> Programmierer um einen maßgeschneiderten Operator zu bitten (siehe <acronym>PHP</acronym> Integration / maßgeschneiderte Operatoren), der dann wie folgt genutzt wird:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<tr tal:repeat="ranking playerRankings"
    tal:attributes="class css-odd:repeat/ranking/odd">
  …
</tr>
]]></programlisting></informalexample>

        <para>
          Der Operator sollte "odd" zurückgeben, wenn <varname>repeat/ranking/odd</varname> wahr ist, sonst <constant>NULL</constant>.
        </para>

        <section id="optional-attrs"><title>Optionale Attribute</title>

          <para>
            Verwenden Sie in <sgmltag>tal:attributes</sgmltag> <acronym>TALES</acronym>-Alternativen (die a|b|c Notation) und ist <varname>nothing</varname> (oder <varname>NULL</varname> in <acronym>PHP</acronym>) die letzte der Alternativen, wird das Attribut gar nicht ausgegeben wenn kein Wert dafür vorhanden ist. (Hierdurch werden leere Attribute vermieden.):
          </para>
          <informalexample><programlisting language="xml"><![CDATA[… tal:attributes="title object/tooltip | nothing"> ]]></programlisting></informalexample>

          <para>
            <acronym>XHTML</acronym>-Attribute wie <sgmltag>selected</sgmltag>, <sgmltag>checked</sgmltag> usw. werden automatisch richtig verwendet.
          </para>

          <informalexample><programlisting language="xml"><![CDATA[<input type="checkbox" tal:attributes="checked object/isChecked"/>]]></programlisting></informalexample>

          <warning>
            <para>
              Beachten Sie, daß <acronym>XHTML</acronym> Groß- und Kleinschreibung unterscheidet. <sgmltag>SELECTED</sgmltag> ist in <acronym>XHTML</acronym> ein Fehler. Verwenden Sie <sgmltag>selected</sgmltag>.
            </para>
          </warning>

        </section>
      </section>
      <section id="tal-on-error">
        <title><sgmltag>tal:on-error</sgmltag></title>

        <para>
          Wenn ein Pfadfehler oder irgendeine <acronym>PHP</acronym>-Ausnahme in der Auszeichnung auftritt, ersetzt dieses Attribut die Auszeichnung durch das Ergebnis des <sgmltag>tal:on-error</sgmltag>-Ausdrucks.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:on-error="string:No username defined here"
      tal:content="user/name">the user name here</span>
]]></programlisting></informalexample>

        <para>
          Tritt beim Zugriff auf <varname>name</varname> oder <varname>user</varname> ein Fehler auf, wird die Fehlermeldung anstelle der Auszeichnung ausgegeben.
        </para>

        <para>
          Dies funktioniert auch bei mehreren Vorlagenebenen:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:on-error="string:error occurred somewhere">
  <span tal:content="user/firstname"/>
  <span tal:content="user/lastname"/>
  <span metal:use-macro="userMenu" />
</span>
]]></programlisting></informalexample>

      </section>

    </section><!-- end of TAL Namensraum -->

    <section id="metal">
      <title><acronym>METAL</acronym> Namensraum</title>

      <para>
        Der <acronym>URI</acronym> für diesen Namensraum lautet <code>http://xml.zope.org/namespaces/metal</code>. Um das <code>metal:</code> Attribut Präfix in <acronym>XML</acronym> zu verwenden, müssen Sie es deklarieren:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<html xmlns:tal="http://xml.zope.org/namespaces/metal" …>]]></programlisting></informalexample>

        <note>
          <para>
            PHPTAL erzwingt diese Angabe nicht.
          </para>
        </note>

      <para>
        <acronym>METAL</acronym> ist die Kurzform für „Macro Extension for <acronym>TAL</acronym>“. Dieser Namensraum erlaubt es Vorlagendesignern, Makros zu definieren und aufzurufen. Makros können für die rekursive Ausgabe von Daten oder zum Einbinden von Code aus anderen Vorlagen verwendet werden.
      </para>

      <section id="metal-define-macro">
        <title><sgmltag>metal:define-macro</sgmltag></title>

        <para>
          Dieses Attribut deklariert ein Makro. Mit Makros lassen sich Bibliotheken aus kleinen Vorlagen erstellen, die in anderen Vorlagen wiederverwendet werden können.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[
<div metal:define-macro="main_menu">
  <ul>
    <li><a href="/">home</a></li>
    <li><a href="/products">products</a></li>
    <li><a href="/contact">contact</a></li>
  </ul>

  <div>
    Last modified:
    <span tal:content="mdate">page modification date</span>
  </div>
</div>
        ]]></programlisting></informalexample>

        <para>
          Makros erben den Variablenkontext des Aufrufers. In obigem Beispiel hängt die Variable „<varname>mdate</varname>“ von der aufrufenden Vorlage ab.
        </para>
      </section>

      <section id="metal-use-macro">
        <title><sgmltag>metal:use-macro</sgmltag></title>

        <para>
          Dieses Attribut ruft ein Makro auf und setzt das Ergebnis an seiner statt in die aktuelle Vorlage ein.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[
<span
  tal:comment="main_menu template requires 'mdate' variable"
  tal:define="mdate page/last_modified"
  metal:use-macro="main_menu"
/>
        ]]></programlisting></informalexample>

        <para>
          Makros lassen sich über die Angabe des Dateinamens auch aus anderen Vorlagen ansprechen.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span metal:use-macro="site_macros.xhtml/main_menu"/>
]]></programlisting></informalexample>

        <para>
          Der <acronym>PHPTAL</acronym>-Ersetzungsmechanismus läßt sich auch innerhalb von <sgmltag>metal:use-macro</sgmltag> Werten nutzen:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span metal:use-macro="${design}/site_macros.xhtml/main_menu"/>
]]></programlisting></informalexample>


        <para>Ein Makro darf sich selbst aufrufen. Auf diese Weise können Sie Felder rekursiv ausgeben:</para>
        <informalexample><programlisting language="xml"><![CDATA[        <ul metal:define-macro="show-list">
            <li tal:repeat="item list">
                <tal:block tal:condition="php:is_array(item)" tal:define="list item" metal:use-macro="show-list" />
                <tal:block tal:condition="php:!is_array(item)" tal:content="item" />
            </li>
        </ul>
        ]]></programlisting></informalexample>

      </section>


      <section id="metal-define-slot">
        <title><sgmltag>metal:define-slot</sgmltag></title>

        <para>
          Dieses Attribut darf nur innerhalb einer Auszeichnung mit <sgmltag>metal:define-macro</sgmltag> auftreten.
        </para>

        <para>
          Slots können von der aufrufenden Vorlage mit, auch dynamisch generiertem, eigenem <acronym>XML</acronym>/<acronym>XHTML</acronym>-Inhalt gefüllt werden.
        </para>

        <para>
          Slots können als eine Art rückwirkende Einfügungen gesehen werden; ein Makro kann eine ganze Seite erzeugen, die durch Slots in Abhängigkeit vom <acronym>URL</acronym> individualisiert wird.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span metal:define-slot="news_place">
  <table>
    <tr tal:repeat="item php:latestNews()">
      <td tal:content="item/value">news description</td>
    </tr>
  </table>
</span>
]]></programlisting></informalexample>

        <para>
          Obiges Beispiel definiert eine Stelle '<emphasis>news_place</emphasis>', die durch die aufrufende Vorlage überschrieben werden kann. Im nächsten Abschnitt wird dieses Beispiel fortgeführt.
        </para>

      </section>


      <section id="metal-fill-slot">
        <title><sgmltag>metal:fill-slot</sgmltag></title>

        <para>
          Dieses Attribut darf nur innerhalb eines <sgmltag>metal:use-macro</sgmltag>-Blocks verwendet werden.
        </para>

        <para>
          Hiermit wird <acronym>PHPTAL</acronym> angewiesen, einen bestimmten Slot mit dem Inhalt innerhalb der <sgmltag>metal:fill-slot</sgmltag>-Auszeichnung zu ersetzen.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:condition="logged" metal:fill-slot="news_place">
  <h2>user menu</h2>
  <ul>
    <li><a href="/user/action/inbox">inbox</a></li>
    <li><a href="/user/action/new">new mail</a></li>
    <li><a href="/user/action/disconnect">disconnect</a></li>
  </ul>
</span>
]]></programlisting></informalexample>

        <para>
          Slots ermöglichen durch ein einfaches Einsetzverfahren tatsächlich wiederverwendbare und individualisierbare Vorlagen.
        </para>

      </section>

    </section><!-- end of METAL Namensraum -->


    <section id="i18n">
      <title><acronym>I18N</acronym> Namensraum</title>

      <para>
        Der <acronym>URI</acronym> für diesen Namensraum lautet <code>http://xml.zope.org/namespaces/i18n</code>. Um das <code>i18n:</code> Attribut Präfix in <acronym>XML</acronym> zu verwenden, müssen Sie es deklarieren:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<html xmlns:i18n="http://xml.zope.org/namespaces/i18n" …>]]></programlisting></informalexample>

      <note>
        <para>
          PHPTAL erzwingt diese Angabe nicht.
        </para>
      </note>

      <note>
        <para>
          „i18n“ ist eine Kurzform für das englische 'internationalization' (<emphasis>i</emphasis>, 18 Buchstaben, <emphasis>n</emphasis>).
          Dieser XML-Namensraum erlaubt es Template-Designern, Textbereiche anzugeben, die in die jeweilige Ausgabesprache übersetzt werden sollen.
        </para>
      </note>

      <section id="i18n-translate">
        <title><sgmltag>i18n:translate</sgmltag></title>

        <para>
          Dieses Attribut definiert Text, der durch das <acronym>PHPTAL</acronym>-Übersetzungssystem übersetzt werden soll.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<div i18n:translate="string:welcome_message">Welcome here</div>
]]></programlisting></informalexample>

        <para>
          Im obigen Beispiel wird <acronym>PHPTAL</acronym> nach einem Übersetzungsschlüssel 'welcome_message' suchen und den Auszeichnungsinhalt durch die Übersetzung in der gerade aktuellen Sprache ersetzen.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<div i18n:translate="">Welcome here</div>
]]></programlisting></informalexample>

        <para>
          Hier ist die Verwendung ein wenig anders, da kein Übersetzungsschlüssel angegeben worden ist. <acronym>PHPTAL</acronym> wird den Auszeichnungsinhalt 'Welcome here' als Schlüssel benutzen. Kennt das Übersetzungssystem den Schlüssel 'Welcome here', ergibt das eine regelgerechte Übesetzung.
        </para>

        <para>
          Wird keine Übersetzung gefunden, wird der Schlüssel als Ergebnis benutzt. Darum ist es sinnvoll, lesbare Texte statt Kürzel als Schlüssel zu verwenden.
        </para>

        <para>
          Beachten Sie bitte, daß der Schlüssel, um eine dynamische Schlüsselwahl zu ermöglichen, auch in einer Variablen enthalten sein kann.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<div tal:define="welcome random_welcome_message">
  <div i18n:translate="welcome">…</div>
</div>]]></programlisting></informalexample>

      </section>

      <section id="i18n-attributes">
        <title><sgmltag>i18n:attributes</sgmltag></title>

        <para>
          Dieses Attribut legt fest, welche <acronym>HTML</acronym>-Attribute übersetzt werden sollen. Ähnlich zu <sgmltag>i18n:translate</sgmltag> verlangt <sgmltag>i18n:attributes</sgmltag> eine durch Semikola getrennte Liste aus Attribut-/Schlüssel-Paaren.
        </para>
        <informalexample><programlisting language="xml"><![CDATA[<img i18n:attributes="alt 'picture alternative text';title thetitle" alt="Picture" title="${thetitle}" />
]]></programlisting></informalexample>

      </section>

      <section id="i18n-name">
        <title><sgmltag>i18n:name</sgmltag></title>

        <para>
          Dieses Attribut weist einer Übersetzungsvariablen einen Wert zu.
        </para>

        <para>
          Übersetzungen können <varname>${xxx}</varname> Zeichenketten enthalten, in denen "<varname>xxx</varname>" den Namen einer Variablen bezeichnet, die dynamisch eingefügt werden soll.
        </para>

        <para>
          Diese Variable enthält die Auszeichnung und ihren Inhalt. Wird die Auszeichnung um den Inhalt herum nicht benötigt, benutzen Sie <sgmltag>tal:replace</sgmltag> anstatt <sgmltag>tal:content</sgmltag>. Falls der Wert eine Verknüpfung von Zeichenketten ist kann <sgmltag>tal:omit-tag</sgmltag> hilfreich sein.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span i18n:name="myVar" tal:content="some/path"/>
<!-- <span>${some/path}</span> -->

<span i18n:name="myVar" tal:replace="some/path"/>
<!-- ${some/path} -->

<span i18n:name="myVar">foo</span>
<!-- <span>foo</span> -->

<span i18n:name="myVar" tal:omit-tag="">foo</span>
<!-- foo -->
]]></programlisting></informalexample>

        <para>
          Ein Beispiel zur Benutzung von i18n:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<div i18n:translate="">
  Welcome <span i18n:name="user" tal:replace="user/name"/>,
  you have <span i18n:name="mails" tal:replace="user/nbrMails"/>
  unread mails.
</div>
]]></programlisting></informalexample>

        <para>
          Der Übersetzungsschlüssel lautet hier:
        </para>

        <informalexample><programlisting language="xml"><![CDATA["Welcome ${user}, you have ${mails} unread mails."
]]></programlisting></informalexample>

        <para>
          <acronym>PHPTAL</acronym> wird in ihrer Übersetzung <varname>${user}</varname> durch <varname>${user/name}</varname> und <varname>${mails}</varname> durch <varname>${user/nbrMails}</varname> ersetzen.
        </para>

        <para>
          Weitere Informationen zu <acronym>I18N</acronym> und <acronym>PHPTAL</acronym> finden sich im <acronym>PHP</acronym>-Kapitel dieses Buches.
        </para>

      </section>

      <section id="xhtml-in-translations"><title><acronym>XHTML</acronym> in Übersetzungen</title>

        <para>
          In der Grundeinstellung wird angenommen, daß Übersetzungen nur Text enthalten; daher maskiert <acronym>PHPTAL</acronym> sämtliche "&lt;" Zeichen.
        </para>

        <para>
          In <sgmltag>i18n:translate</sgmltag> können Sie das <code>structure</code>-Schlüsselwort verwenden, um die Maskierung zu unterbinden und den übersetzten Text unverändert zu übernehmen.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<div i18n:translate="structure '<b>bold text</b>'" />
]]></programlisting></informalexample>

        <para>Ergibt:</para>

        <informalexample><programlisting language="xml"><![CDATA[<div><b>bold text</b></div>
]]></programlisting></informalexample>

        <warning>
          <para>
            Vorbehalt: Dies funktioniert nur in den einfachsten Fällen – <acronym>TAL</acronym>-Attribute innerhalb der Übersetzungen werden ignoriert. Nicht wohlgeformtes <acronym>XHTML</acronym> in Übersetzungen zerstört die Wohlgeformtheit der ganzen Ergebnisseite.
          </para>
        </warning>

      </section>

    </section><!-- end of I18N Namensraum -->


    <section id="phptal-namespace">
      <title><acronym>PHPTAL</acronym> Namensraum</title>

      <para>
        Der <acronym>URI</acronym> für diesen Namensraum lautet <code>http://phptal.org/ns/phptal</code>. Um das <code>phptal:</code> Attribut Präfix in <acronym>XML</acronym> zu verwenden, müssen Sie es deklarieren:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<html xmlns:phptal="http://phptal.org/ns/phptal" …>]]></programlisting></informalexample>

      <note>
        <para>
          PHPTAL erzwingt diese Angabe nicht.
        </para>
      </note>

      <para>
        Diese Attribute sind in den <acronym>TAL</acronym>-Spezifikationen nicht enthalten, aber sehr nützlich für die Arbeit mit <acronym>PHPTAL</acronym>.
      </para>

      <section id="phptal-debug">
        <title><sgmltag>phptal:debug</sgmltag></title>

        <para>
          Dieses Attribut schaltet für den Inhalt der Auszeichnung innerhalb derer es definiert ist das <acronym>PHPTAL</acronym> Debugging ein.
        </para>

        <para>
          Der Debugmodus speichert Informationen wie den Dateinamen und die Quellcodezeilennummer in der Vorlage, so daß Ausnahmemeldungen über fehlerhafte Pfadzugriffen mehr Information über das 'Wo' enthalten.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<html>
  <head>
    …
  </head>
  <body>
    <div id="menu">
      …
    </div>
    <div id="leftPane" phptal:debug=""
      tal:comment="this div seems buggy, keep
      trace of where errors are thrown">
          …
    </div>
  </body>
</html>
]]></programlisting></informalexample>

      </section>

      <section id="phptal-cache">
        <title><sgmltag>phptal:cache</sgmltag></title>

        <para>
          Durch dieses Attribut wird ein komplettes Element, also Auszeichnung samt Attributen und Inhalt, auf der Festplatte gepuffert und erst dann wieder neu interpretiert, wenn die Pufferzeit abgelaufen ist.
        </para>

        <note><para>
          Eine solche Pufferung lohnt sich nur für Elemente, die sehr komplexe Ausdrücke, Makros aus externen Dateien, oder <acronym>PHP</acronym>-Ausdrücke/Objekte mit Datenbankzugriffen enthalten. Ansonsten sind nichtgepufferte Vorlagen genauso schnell.
        </para></note>

        <para>
          Der Inhalt dieses Attributs ist eine Zeitspanne (wie lange soll das Element gepuffert werden), die als Zahl mit '<constant>d</constant>', '<constant>h</constant>', '<constant>m</constant>' oder '<constant>s</constant>' als Einheit geschrieben wird.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<div class="footer" phptal:cache="3h">…</div>]]></programlisting></informalexample>

        <para>
          <sgmltag>&lt;div></sgmltag> wird maximal alle 3 Stunden einmal ausgeführt.
        </para>

        <para>
          Der Zeitspanne kann wahlweise ein "<varname>per</varname>"-Parameter folgen, der festlegt, ob der Puffer geteilt wird. In der Grundeinstellung wird ein Elementpuffer von allen Seiten genutzt, die die entsprechende Vorlage nutzen. Sie können ein "<varname>per url</varname>" hinzufügen, so daß jede <acronym>URL</acronym> einen eigenen Puffer für das betreffende Element erhält.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<ol id="breadcrumbs" phptal:cache="1d per url">…</ol>]]></programlisting></informalexample>

        <para>
          <sgmltag>&lt;ol></sgmltag> wird für jede Seite separat einen Tag lang gepuffert.
        </para>

        <para>
          Um für jeden einzelnen Wert eines Ausdrucks (der im Ergebnis eine Zeichenkette liefern muß) einen eigenen Puffer zu erhalten, können Sie "<varname>per expression</varname>" verwenden.
        </para>
        <note>
          <para>Dabei dürfen sich die Ausdrücke nicht auf Variablen beziehen, die via <sgmltag>tal:define</sgmltag> in der selben Auszeichnung definiert werden.
          </para>
        </note>

        <informalexample><programlisting language="xml"><![CDATA[<ul id="user-info" phptal:cache="25m per object/id">…</ul>]]></programlisting></informalexample>

        <para>
          <sgmltag>&lt;ul></sgmltag> wird für jede Object-ID einzeln 25 Minuten lang gepuffert.
        </para>

        <warning>
          <para>
            Seien Sie vorsichtig damit private Daten Ihrer Nutzer zu puffern. Der Zwischenspeicher wird von allen Nutzern geteilt, wenn Sie ihn nicht durch <code>per user/id</code> oder ähnliche Ausdrücke benutzerspezifisch machen.
          </para>
        </warning>

        <section id="cache-refresh"><title>Gesteuerte Auffrischung</title>

          <para>
            Es ist eine gute Idee, einen Puffer nicht händisch zu löschen, sondern in den <varname>per</varname>-Parameter eine Versionsnummer oder einen Zeitstempel einzufügen. Dadurch wird die gepufferte Vorlage erneuert, sobald sich die Version oder der Zeitstempel ändert. Ein separates Pufferlöschen ist dann nicht nötig.
          </para>

          <informalexample><programlisting language="xml"><![CDATA[<div phptal:cache="100d per php:news.id . news.last_modified_date">…</div>]]></programlisting></informalexample>

        </section>

        <section id="cache-limits"><title>Begrenzungen:</title>
          <itemizedlist>
            <listitem>
              <para>
                <sgmltag>phptal:cache</sgmltag>-Blöcke können geschachtelt werden, aber der äußere Block puffert die inneren unabhängig von ihrem Alter.
              </para>
            </listitem>
            <listitem>
              <para>
                <sgmltag>metal:fill-slot</sgmltag> können Sie in Auszeichnungen mit <sgmltag>phptal:cache</sgmltag> nicht verwenden.
              </para>
            </listitem>
          </itemizedlist>

        </section>

      </section>

      <section id="phptal-tales">
        <title><sgmltag>phptal:tales</sgmltag></title>

        <para>
          Mit diesem Attribut läßt sich das Verhalten von <acronym>PHPTALES</acronym> verändern. In der Grundeinstellung werden <acronym>PHPTAL</acronym>-Attribute eng an <acronym>ZPT</acronym> angelehnt interpretiert. In manchen Fällen bräuchte man aber nur <acronym>PHP</acronym> und findet sich bei der ständigen Verwendung des <code>php:</code>- Operators wieder.
        </para>

        <para>
          Ein weiterer Punkt ist die Art und Weise, in der <acronym>PHPTAL</acronym> Pfade auswerten muß. Zum Beispiel dauert die Auswertung von <varname>myobject/mymethod/property/10/othermethod/hashkey</varname> relativ lange (denken Sie darüber aber nicht zuviel nach - optimieren Sie erst, wenn Sie <emphasis>wirklich</emphasis> ein Problem mit dem Durchsatz haben!).
        </para>

        <para>
          Zur Laufzeit nimmt sich <acronym>PHPTAL</acronym> <varname>myobject</varname> und findet heraus, daß es ein Objekt ist; stellt dann fest, daß <varname>mymethod</varname> eine Methode dieses Objektes (und keine Variable) ist und ruft sie auf; untersucht das Ergebnis, um festzustellen, daß dies ein Objekt mit einer Eigenschaft ist; sieht, daß sein Wert ein Feld ist; greift sich das <varname>10</varname>-Element dieses Feldes und bestimmt, daß das ein Objekt ist; entscheidet, daß <varname>othermethod</varname> eine Methode dieses Objektes (und keine Variable) ist und erhält das Ergebnis ihrer Ausführung; um dieses wiederum als Objekt zu erkennen und sich den Wert für den Schlüssel <varname>hashkey</varname> zu holen.
        </para>

        <para>
          Natürlich ist das ein extremes Beispiel, und da das Ganze schnell genug ist, interessiert es zumeist nicht. Was geschieht aber, wenn ein solcher Pfad innerhalb eines großen <sgmltag>tal:repeat</sgmltag> aufgerufen wird? Hmm… Hier kann <sgmltag>phptal:tales</sgmltag> hilfreich sein:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<html>
  <body>
    <table phptal:tales="php">
      <tr tal:repeat="myobject document.getChildren()">
        <td
          tal:content="myobject.mymethod().property[10].otherMethod().hashkey"></td>
      </tr>
    </table>
  </body>
</html>
]]></programlisting></informalexample>

        <para>
          Beachten Sie, daß obiges Beispiel dasselbe tut wie:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<html>
  <body>
    <table>
      <tr tal:repeat="myobject php:document.getChildren()">
        <td
          tal:content="php:myobject.mymethod().property[10].otherMethod().hashkey"></td>
      </tr>
    </table>
  </body>
</html>
]]></programlisting></informalexample>

        <note>
          <para>
            Der <code>php:</code>-Operator wird in einem <link linkend="tales-php">eigenen Kapitel</link> erläutert.
          </para>
        </note>

      </section>

    </section><!-- end of <acronym>PHPTAL</acronym> Namensraum -->

    <section id="phptal-blocks">
      <title><sgmltag>tal:block</sgmltag></title>

      <para>
        <sgmltag>tal:block</sgmltag> ist ein syntaktisches Zückerchen für Auszeichnungen, die viele <acronym>TAL</acronym> Attribute enthalten, die nicht ausgegeben werden sollen.
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<tal:block define="myvar string:Some value"/>
]]></programlisting></informalexample>

      <para>
        ist dasselbe wie:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<span tal:define="myvar string:Some value" tal:omit-tag=""/>
]]></programlisting></informalexample>

      <para>
        Ein weiteres Beispiel:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<tal:block condition="someCondition" repeat="item someRepeat">
  <div metal:use-macro="x"/>
</tal:block>
]]></programlisting></informalexample>

      <para>
        ist dasselbe wie:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<div tal:omit-tag=""
     tal:condition="someCondition"
     tal:repeat="item someRepeat">
  <div metal:use-macro="x"/>
</div>
]]></programlisting></informalexample>

    </section><!-- end of *:block -->

    <section id="phptales">
      <title><acronym>PHPTALES</acronym></title>

      <para>
        Zum Formulieren von Ausdrücken innerhalb von TAL-, METAL-, <acronym>PHPTAL</acronym>-Attributen wird <acronym>PHPTALES</acronym> verwendet. In den vorhergehenden Beispielen sind ihnen schon einige <acronym>PHPTALES</acronym> Beispielverwendungen (<code>string:</code>, <code>php:</code>, <code>not:</code>, …) begegnet. Dieses Kapitel beschreibt nun die Verwendung von <acronym>PHPTALES</acronym> in Vorlagen.
      </para>

      <para>
        Der Wert eines <acronym>TAL</acronym>-Attributs darf mehr als einen Ausdruck enthalten (z. B: <sgmltag>tal:define</sgmltag>). Dabei müssen die einzelnen Ausdrücke durch '<literal>;</literal>' getrennt werden.
      </para>

      <section id="tales-path">
        <title>path:</title>

        <para>
          Das ist der Standardoperator, der innerhalb eines <acronym>TAL</acronym>-Ausdrucks verwendet wird, wenn kein anderer Operator angegeben wird.
        </para>

        <para>
          Folgende Zeilen liefern dasselbe Ergebnis:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:content="data/user/name"/>
<span tal:content="path:data/user/name"/>
<span>${data/user/name}</span>
]]></programlisting></informalexample>

        <para>
          In der Vorlage oder in einem Ausdruck können Sie auf eine bekannte Variable zugreifen, indem Sie ihren Pfad in der Form <code>${path/to/my/variable}</code> angeben.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<h1>${document/title}</h1>
<span tal:replace="string:welcome ${user/name},
this page has been readed ${page/countRead} times"/>
]]></programlisting></informalexample>

      <warning><para>Falls Sie versuchen eine Variable zu lesen, die nicht existiert, wirft <acronym>PHPTAL</acronym> eine Ausnahme aus. Verwenden Sie <link linkend="tales-exists">exists:</link> um zu überprüfen, ob eine Variable lesbar ist.</para></warning>

      </section>

      <section id="conditional">
        <title>Alternative <acronym>PHP</acronym>-Operator Syntax</title>

        <para>
          Da '<literal>&lt;</literal>', '<literal>&gt;</literal>' und '<literal>&amp;</literal>' in XML nur umständlich zu verwenden sind, bietet <acronym>PHPTAL</acronym> eine alternative <acronym>PHP</acronym>-Operator Syntax für diese und, aus Konsistenzgründen, ein paar weitere Zeichen.
        </para>

        <remark>
          Diese Syntax kann nur in <code>php:</code>-Ausdrücken verwendet werden.
        </remark>

        <itemizedlist>
          <listitem><para>
            <code>&lt;</code> : <code>LT</code> (kleiner als)
          </para></listitem>
          <listitem><para>
            <code>&gt;</code> : <code>GT</code> (größer als)
          </para></listitem>
          <listitem><para>
            <code>&lt;=</code> : <code>LE</code> (kleiner oder gleich)
          </para></listitem>
          <listitem><para>
            <code>&gt;=</code> : <code>GE</code> (größer oder gleich)
          </para></listitem>
          <listitem><para>
            <code>==</code> : <code>EQ</code> (gleich)
          </para></listitem>
          <listitem><para>
          <code>===</code> : <code>EQQ</code> (exakt gleich)
          </para></listitem>
          <listitem><para>
            <code>!=</code> : <code>NE</code> (ungleich)
          </para></listitem>
          <listitem><para>
          <code>!==</code> : <code>NEE</code> (exakt ungleich)
          </para></listitem>
          <listitem><para>
            <code>&amp;&amp;</code> : <code>AND</code>
          </para></listitem>
          <listitem><para>
            <code>||</code> : <code>OR</code>
          </para></listitem>
        </itemizedlist>
      </section>

      <section id="tales-string">
        <title>string:</title>

        <para>
          Da Ausdrücke mit '<literal>;</literal>' getrennt werden, und weil '<literal>$</literal>' Zeichen den Anfang eines Pfades markieren, müssen Sie
        </para>

        <itemizedlist>
          <listitem><para>
              '<literal>;;</literal>' verwenden, wenn Sie ein '<code>;</code>' in eine Zeichenkette einfügen wollen,
          </para></listitem>
          <listitem><para>
              '<literal>$$</literal>' verwenden, wenn Sie ein '<code>$</code>' Zeichen in eine Zeichenkette einfügen wollen.
          </para></listitem>
        </itemizedlist>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:replace="string:this is a $$100 page"/>
string:foo $bar baz       <!-- $bar wird ersetzt -->
string:foo $$bar baz      <!-- keine Ersetzung -->
string:foo ; php:doFoo()  <!-- zwei einzelne Ausdrücke -->
string:foo ;; php:doFoo() <!-- eine einzige Zeichenkette -->
]]></programlisting></informalexample>
      </section>

      <section id="tales-php">
        <title><code>php:</code></title>

        <para>
          Dieser Operator erwartet als Argument einen regulären <acronym>PHP</acronym>-Ausdruck, wobei er '<code>-&gt;</code>' durch einen Punkt '<code>.</code>' ersetzt, und Variablennamen  mit einem vorangestellen Dollarzeichen '<literal>$</literal>' versieht.
        </para>

        <para>
          Ein vom Rest des Ausdrucks durch Leerzeichen getrennter Punkt '<code>.</code>' wird als Verkettungszeichen behandelt.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[php:htmlentities(foo)
php:'string ${varReplaced}'
php:'string ${some.path().to[0].var}'
php:NOT foo OR (bar GT baz)
php:a + b
php:array('a', 'b', 'c')
php:range(0, 90)
php:foo . a.b.c(e) . htmlentities(SomeClass::staticMethod())
php:SomeClass::ConstOfClass
php:SomeClass::$staticVar
]]></programlisting></informalexample>

        <para>
          Verwenden Sie <code>php:</code> sparsam. In 80% ihrer Vorlagen werden Sie diesen Operator nicht benötigen, aber manchmal werden Sie eine spezielle <acronym>PHP</acronym>-Methode aufrufen müssen, z.B. um sich zu vergewissern, daß ein Benutzer angemeldet ist, oder um spezielle, komplexe Daten, in Abhängigkeit von einigen Bedingungen, innerhalb der Vorlage dynamisch zu laden.
        </para>

      </section>

      <section id="tales-not">
        <title><code>not:</code></title>

        <para>
          Dieser Operator bewirkt eine boolsche Negation. Er wird in <sgmltag>tal:condition</sgmltag> Ausdrücken verwendet.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:condition="not: logged">not logged</span>
]]></programlisting></informalexample>
      </section>

      <section id="tales-exists">
        <title><code>exists:</code></title>

        <para>
          Dieser boolsche Operator gibt <varname>wahr</varname> (<varname>true</varname>) zurück, wenn der getestete Pfad existiert und <varname>falsch</varname> (<varname>false</varname>) sonst. Er funktioniert analog zur PHP-Funktion isset().
        </para>

        <para>
          Normalerweise liefert die Verwendung eines nicht existierenden Pfades eine Fehlermeldung wie "Cannot find variable '<varname>foo</varname>' in current scope". Darum sollten unsichere Pfade vor der Verwendung immer geprüft werden:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:condition="exists: user/preferences"
      tal:content="user/preferences">
  user preferences here if defined
</span>
]]></programlisting></informalexample>

        <tip>
          <para>
            Benutzen Sie in <acronym>PHPTALES</acronym> stattdessen die Funktion <function>isset()</function>.
          </para>
        </tip>

      </section>

      <section id="tales-default">
        <title><code>default</code></title>

        <para>
          Dies ist kein Operator, sondern ein Schlüsselwort, das es Vorlagenentwicklern erlaubt, im Falle eines Fehlers, oder wenn etwas nicht definiert ist, den Inhalt einer Auszeichnung als Ersatzwert zu verwenden.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<span tal:define="myVar path/to/possible/var | default">
  default my var value
</span>

<span tal:content="some/var | other/path | default">
  no some/var and no other/path found here
</span>

<a href="unknown.xhtml" title="Unknown page"
   tal:attributes="href item/href | default; title item/title | default"
   tal:content="item/title | default">Unknown page</a>
]]></programlisting></informalexample>

        <para>
          Das obige Beispiel führt das '<literal>|</literal>'-Zeichen ein, das für Definitionen oder Ausgaben die Festlegung von Alternativen ermöglicht.
        </para>
      </section>

      <section id="tales-structure">
        <title><code>structure</code></title>

        <para>
          Dies ist kein Operator, sondern ein Schlüsselwort.
        </para>

        <para>
          Bei der Ausgabe von Variablen innerhalb von <acronym>PHPTAL</acronym>-Vorlagen kodiert <acronym>PHPTAL</acronym> alle <acronym>HTML</acronym>/<acronym>XML</acronym>-eigenen Zeichen, um sicherzustellen, daß das Ausgabedokument gültig ist.
        </para>

        <para>
          Es kommt vor, daß Sie <acronym>HTML</acronym>/<acronym>XML</acronym>-Variablen verwenden, die unverändert ausgegeben werden sollen:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<h1 tal:content="structure document/title"/>
<span tal:replace="structure document/content"/>
]]></programlisting></informalexample>

        <para>
          Im obigen Beispiel wird angenommen, daß <varname>$document->title</varname> und <varname>$document->content</varname> Variablen sind, die vorformatiertes <acronym>HTML</acronym> enthalten, das unverändert ausgegeben werden soll.
        </para>
      </section>

      <section id="expression-chains">
        <title>Ausdrucksketten</title>

        <para>
          Ein Ausdruckskette ist eine durch das '<literal>|</literal>'-Zeichen getrennte Liste von Ausdrücken.
        </para>

        <para>
          <acronym>PHPTAL</acronym> wertet die Ausdrücke in einer solchen Kette von vorne nach hinten aus, bis der erste Ausdruck ein Nicht-Null-Ergebnis zurückliefert, das keine Fehlermeldung ist. Danach bricht die Auswertung ab.
        </para>

        <para>
          Da ein <code>string:</code>-Ausdruck immer wahr ist, wird die Auswertung durch einen <code>string:</code>-Ausdruck immer beendet.
        </para>

        <para>
          Innerhalb von Ausdrucksketten können Sie, wie jeden anderen Ausdruck, auch Ausdrücke mit dem <code>php:</code>-Operator verwenden:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<h1 tal:content="page/title | page/alternativeTitle | default>
  untitled page
</h1>
]]></programlisting></informalexample>
      </section>
    </section><!-- end of TALES -->
  </article>

  <article id="phpintegration">
    <title><acronym>PHP</acronym> Integration</title>

    <para>
      Dieser Abschnitt richtet sich an <acronym>PHP</acronym>-Entwickler und erläutert die Verwendung und Anpassung von <acronym>PHPTAL</acronym> bei einfacher und fortgeschrittener Nutzung.
    </para>

    <itemizedlist>
      <listitem><para>
        <classname>PHPTAL</classname>: die <acronym>PHPTAL</acronym>-Hauptklasse, zum Laden und Ausführen von Vorlagen.
      </para></listitem>
      <listitem><para>
        <classname>PHPTAL_Filter</classname>: filtert Vorlagenquellen und <acronym>PHPTAL</acronym> Ausgabe.
      </para></listitem>
      <listitem><para>
        <classname>PHPTAL_Trigger</classname>: behandelt die Ausgabe von Elementen mit <sgmltag>phptal:id</sgmltag>.
      </para></listitem>
      <listitem><para>
          <classname>PHPTAL_TranslationService</classname>: erlaubt das Ersetzen der eingebauten <productname>gettext</productname>-Unterstützung durch ein eigenes Internationalisierungssystem.
      </para></listitem>
    </itemizedlist>

    <section id="constants">
      <title>Konstanten</title>

      <para>
        Die einzige Konstante, die in der Datei <filename>PHPTAL.php</filename> definiert ist, ist <constant>PHPTAL_VERSION</constant>. Sie enthält  die Version der <acronym>PHPTAL</acronym>-Bibliothek (Format: <code>X.X.X</code>) die auf dem Rechner installiert ist.
      </para>

      <para>
        Die Konfigurationskonstanten aus älteren Versionen sind durch Methoden ersetzt worden.
      </para>
    </section>

    <section id="configuration">
      <title>Konfigurationsmethoden</title>

      <para>
        <acronym>PHPTAL</acronym> versucht die bestmöglichen Grundeinstellungen zu verwenden. Eine Änderung sollte nicht <emphasis>nötig</emphasis> sein.
      </para>

      <para>
        All of these are methods of the <classname>PHPTAL</classname> class. <methodname>set<replaceable>*</replaceable></methodname> methods return instance of their class, so you can chain them:
      </para>

      <informalexample><programlisting language="php"><![CDATA[
<?php
  echo $phptal->setPhpCodeDestination('/tmp/phptal')->setOutputMode(PHPTAL::XML)->setTemplate('tpl.zpt')->execute();
?>
]]></programlisting></informalexample>
       <para>
         is the same as:
       </para>

       <informalexample><programlisting language="php"><![CDATA[
<?php
  $phptal->setPhpCodeDestination('/tmp/phptal');
  $phptal->setOutputMode(PHPTAL::XML);
  $phptal->setTemplate('tpl.zpt');
  echo $phptal->execute();
?>
]]></programlisting></informalexample>


       <para>
         There are other <methodname>set<replaceable>*</replaceable></methodname> methods for filters, internationalisation, etc. They have been described in other sections of this manual.
       </para>

       <section id="set-output-mode">
         <title><methodname>setOutputMode(<replaceable>mode</replaceable>)</methodname></title>

         <para>
           Changes what syntax is used when generating elements. Valid modes are:
         </para>

         <variablelist>
           <varlistentry><term><constant>PHPTAL::XHTML</constant></term>
             <listitem>
              <para>
                In this mode (which is default) PHPTAL will output XHTML in a way that is backwards-compatible with <acronym>HTML</acronym> browsers.
              </para>
              <itemizedlist>
                <listitem>
                  <para>
                    Empty elements will be forced to use self-closing form (<sgmltag>&lt;img/&gt;</sgmltag>, <sgmltag>&lt;link/&gt;</sgmltag>), and non-empty elements will always have closing tag.
                  </para>

                  <warning>
                    <para>
                      XHTML output mode changes <sgmltag>&lt;link&gt;</sgmltag> element in way that is incompatible with RSS. Use XML output mode to generate RSS feeds or use Atom.
                    </para>
                  </warning>
                </listitem>
                <listitem>
                  <para>
                    Boolean attribtes (<sgmltag>checked</sgmltag>, <sgmltag>selected</sgmltag>, etc.) will always have value required by the XHTML specification (it simplifies use of <sgmltag>tal:attributes</sgmltag>).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>&lt;![CDATA[</code> blocks will be added or removed automatically and will use special escaping syntax that is safe in both XML and HTML.
                  </para>
                  <tip>
                    <para>If you're <emphasis>always</emphasis> sending XHTML as <code>application/xhtml+xml</code>, then it's better to use XML output mode.
                    </para>
                  </tip>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <constant>PHPTAL::HTML5</constant>
            </term>
            <listitem>
              <para>
                This mode generates documents that have best compatibility with <code>text/html</code> parsing in current web browsers, but are not XML.
              </para>
              <para>
                PHPTAL will change DOCTYPEs to <sgmltag>&lt;!DOCTYPE html></sgmltag>. Namespace declarations, name prefixes, explicit <sgmltag>CDATA</sgmltag> sections and other HTML-incompatible constructs will be ommited.
              </para>
              <note>
                <para>
                  This mode is <emphasis>not</emphasis> a "tag soup". PHPTAL will close all elements properly and quote attributes when it's necesary. Output will be properly formatted HTML 5, and fully backwards-compatible with current HTML 4 browsers.
                </para>
              </note>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><constant>PHPTAL::XML</constant></term>
            <listitem>
              <para>
                This mode outputs "pure" XML without compatibility with <code>text/html</code> parsing. Use this mode when generating feeds, SVG, MathML, RDF and other XML files.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="set-encoding">
        <title><methodname>setEncoding(<replaceable>encoding</replaceable>)</methodname></title>
        <para>
          Gibt die in Ihren Vorlagen verwendete Kodierung an. Die Grundeinstellung ist <acronym>UTF-8</acronym>.
        </para>
        <para>
          <acronym>PHPTAL</acronym> geht davon aus, das die Kodierung aller Vorlagen und erzeugten Dokumente die gleiche ist. Der BOM (Byte Order Marker) wird aus UTF-8 Dokumenten entfernt.
        </para>
        <note>
          <para>
            <acronym>PHPTAL</acronym> liest keine Zeichenkodierungen aus <acronym>XML</acronym>-Dateien und verändert niemals eine Kodierung.
          </para>
        </note>
        <tip>
          <para>
            Ersparen Sie sich den Ärger und verwenden Sie immer und für alles <acronym>UTF-8</acronym>.
          </para>
        </tip>
      </section>

      <section id="config-methods"><title>Other methods</title>
        <simplesect id="set-template-repository">
          <title><methodname>setTemplateRepository(<replaceable>string_or_array</replaceable>)</methodname></title>
          <para>
            Specifies where to look for templates. If given a string, it adds it to the list of paths searched. If given array, it replaces the list.
          </para>
          <para>
            This doesn't mean all your files need to be in the root directory, you can use sub folders to organize your template designer's work. It's just a shortcut which will allow you to reference templates without specifying the real path, but instead their relative path within the repository.
          </para>
          <tip>
            <para>
              It's like <code>include_path</code>, but for PHPTAL templates only.
            </para>
          </tip>
        </simplesect>
        <simplesect id="set-code-destination">
          <title><methodname>setPhpCodeDestination(<replaceable>path</replaceable>)</methodname></title>
          <para>
            To tell <acronym>PHPTAL</acronym> where to store its intermediate (temporary) <acronym>PHP</acronym> files. By default it uses directory given by  <acronym>PHP</acronym>'s <function>sys_get_tmp_dir()</function>, which usually is '<filename>/tmp/</filename>' directory.
          </para>
        </simplesect>
        <simplesect id="set-code-extension">
          <title><methodname>setPhpCodeExtension(<replaceable>string</replaceable>)</methodname></title>
          <para>
            What filename extension should be used for intermediate <acronym>PHP</acronym> files. The default is <filename>php</filename> and frankly, there's no reason to change it.
          </para>
        </simplesect>
        <simplesect id="set-cache-lifetime">
          <title><methodname>setCacheLifetime(<replaceable>num_days</replaceable>)</methodname></title>
          <para>
            Maximum number of days intermediate files and fragments cached with <sgmltag>phptal:cache</sgmltag> should be kept.
          </para>
        </simplesect>
        <simplesect id="set-force-reparse">
          <title><methodname>setForceReparse(<replaceable>boolean</replaceable>)</methodname></title>
          <para>
            Forces reparsing of all templates all the time. It should be used only for testing and debugging. It's useful if you're testing prefilters or changing code of PHPTAL itself.
          </para>
          <warning>
            <para>
              This slows down <acronym>PHPTAL</acronym> very much. Never enable this on production servers!
            </para>
          </warning>
        </simplesect>
      </section>

    </section>

    <section id="phptal-class">
      <title>class <classname>PHPTAL</classname></title>

      <para>
        Dies ist die Hauptklasse der Bibliothek.
      </para>

      <para>
        Ihre gebräuchlichste Verwendung:
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php

// include the library
require_once 'PHPTAL.php';

// instantiate a new PHPTAL object using specified template file
$tpl = new PHPTAL('mytemplate.xhtml');

// setting some template context variables
$tpl->title  = 'my title';
$tpl->values = array(1,2,3,4);
$tpl->user   = new User('Joe');

// execute the template and echo the result in a 'secure' way
try{
  echo $tpl->execute();
}
catch (Exception $e){
  echo "Exception thrown while processing template\n";
  echo $e;
}
?>
]]></programlisting></informalexample>

      <para>
        You can perfectly well choose to specify the template source after setting context variables.
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php
…
$tpl = new PHPTAL();

// it is a matter of taste but you can use the set() method instead of
// setting context using PHPTAL::__set() like above
$tpl->set('title', 'my title');
$tpl->set('values', array(1,2,3,4));
$tpl->set('user', new User('Joe'));

$tpl->setTemplate('mytemplate.xhtml');
…
?>
]]></programlisting></informalexample>

      <para>
        You can also decide to use a generated string as the template source instead of using an existing template file:
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php

$src = <<<EOS
<html>
  <head>
  <title tal:content="title">my title</title>
  </head>
  <body>
    <h1 tal:content="title">my title</h1>
  </body>
</html>
EOS;

require_once 'PHPTAL.php';
$tpl = new PHPTAL();
$tpl->setSource($src);
$tpl->title = 'this is my title';
try {
    echo $tpl->execute();
}
catch (Exception $e){
    echo $e;
}

?>
]]></programlisting></informalexample>

      <para>
        In the above example, because <acronym>PHPTAL</acronym> requires a template source identifier (usually the template file realpath), <acronym>PHPTAL</acronym> will use the md5 of the <varname>$src</varname> parameter as a unique identifier. You may decide to force the identifier using a second <methodname>setSource()</methodname> argument:
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php
$src = <<<EOS
<html>
  <head>
  <title tal:content="title">my title</title>
  </head>
  <body>
    <h1 tal:content="title">my title</h1>
  </body>
</html>
EOS;

require_once 'PHPTAL.php';
$tpl = new PHPTAL();

// If you specify where the source comes from (second argument to setSource),
// PHPTAL will be able to generate more helpful error messages.
$tpl->setSource($src, __FILE__);
$tpl->title = 'this is my title';
try {
    echo $tpl->execute();
}
catch (Exception $e){
    echo $e;
}

?>
]]></programlisting></informalexample>

    </section>

    <section id="filter-interface">
      <title>interface <classname>PHPTAL_Filter</classname></title>

      <para>
      This interface allows you to automatically filter templates sources
      (pre-filters) or <acronym>PHPTAL</acronym> result (post-filters).
      </para>

      <para>
      Pre filters are invoked before the template parsing and won't be
      invoked until the source template file is modified.
      </para>

      <para>
      Post filters are invoked after each template execution.
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL.php';

class MyPreFilter implements PHPTAL_Filter {
    public function filter($source){
        return $source;
    }
}

class MyPostFilter implements PHPTAL_Filter {
    public function filter($xhtml){
        return $xhtml;
    }
}

$tpl = new PHPTAL('mytemplate.xhtml');
$tpl->setPostFilter(new MyPostFilter());
echo $tpl->execute();
?>
]]></programlisting></informalexample>

<simplesect><title>Multiple post filters</title>
      <para>
      You can set only one post filter using
      <methodname>setPostFilter()</methodname>. If you have more than one filter to chain, you can
      wrap them into a single class, implementing the <classname>PHPTAL_Filter</classname>
      interface, which would invoke the filter's chain.
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL.php';

class FilterChain implements PHPTAL_Filter {
    private $_filters = array();

    public function add(PHPTAL_Filter $filter){
        $this->_filters[] = $filter;
    }

    public function filter($source){
        foreach($this->_filters as $filter){
            $source = $filter->filter($source);
        }
        return $source;
    }
}

$myfilter = new FilterChain();
$myfilter->add(new CommentFilter());  // imaginary filter
$myfilter->add(new TidyFilter());     // imaginary filter

$tpl = new PHPTAL('mytemplate.xhtml');
$tpl->setPostFilter($myFilter);
echo $tpl->execute();
?>
]]></programlisting></informalexample></simplesect>
    </section>

    <section id="trigger-interface">
      <title>interface <classname>PHPTAL_Trigger</classname></title>

      <para>
      The <sgmltag>phptal:id</sgmltag> attribute was added into the <acronym>PHPTAL</acronym> for the <acronym>PHP5</acronym>
      version to replace the old <classname>PHPTAL_Cache</classname> interface and to abstract
      it a little more.
      </para>

      <para>
      When a <sgmltag>phptal:id</sgmltag> is reached, <acronym>PHPTAL</acronym> will look in its triggers list
      for a matching id and will invoke the trigger <methodname>start()</methodname> and <methodname>end()</methodname>
      methods before entering the element, and just after it.
      </para>

      <para>
        If the <methodname>PHPTAL_Trigger::start()</methodname> methods returns
      <constant>PHPTAL_Trigger::SKIPTAG</constant>, <acronym>PHPTAL</acronym> will ignore the element and its
      content (<methodname>start()</methodname> may echo something to replace it).
      </para>

      <para>
      If your trigger wants the element and its content to be executed,
      you'll have to return <constant>PHPTAL_Trigger::PROCEED</constant>.
      </para>

      <para>
        The <methodname>PHPTAL_Trigger::end()</methodname> will be called after the element
      (whether it has been executed or not). This allows you to build
      cache systems using <function>ob_start()</function> in <methodname>start()</methodname> and <function>ob_get_contents()</function>,
      <function>ob_end_clean()</function> in <methodname>end()</methodname>.
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<html>
      …
  <div>

    foo bar baz <span tal:replace="id"/> foo bar baz
    …
  </div>
  …
</html>
]]></programlisting></informalexample>

      <para>
      For some reason we decide the <sgmltag>&lt;div&gt;</sgmltag> block requires to be cached. We
      introduce a <sgmltag>phptal:id</sgmltag> into the template:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<html>
  …
  <div phptal:id="somePossiblyUniqueKeyword">
    …
    foo bar baz <span tal:replace="id"/> foo bar baz
    …
  </div>
  …
</html>
]]></programlisting></informalexample>

      <para>
      Then we write our trigger which will cache the <sgmltag>&lt;div&gt;</sgmltag> content:
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL.php';
require_once 'PHPTAL/Trigger.php';

class CacheTrigger implements PHPTAL_Trigger
{
    public function start($phptalid, $tpl)
    {
        // this cache depends on 'id' which must appears in
        // the template execution context
        $this->_cachePath = 'cache.' . $tpl->getContext()->id;

        // if already cached, read the cache and tell PHPTAL to
        // ignore the tag content
        if (file_exists($this->_cachePath)){
            $this->_usedCache = true;
            readfile($this->_cachePath);
            return self::SKIPTAG;
        }

        // no cache found, we start an output buffer and tell
        // PHPTAL to proceed (ie: execute the tag content)
        $this->_usedCache = false;
        ob_start();
        return self::PROCEED;
    }

    // Invoked after tag execution
    public function end($phptalid, $tpl)
    {
        // end of tag, if cached file used, do nothing
        if ($this->_usedCache){
            return;
        }

        // otherwise, get the content of the output buffer
        // and write it into the cache file for later usage
        $content = ob_get_contents();
        ob_end_clean();
        echo $content;

        $f = fopen($this->_cachePath, 'w');
        fwrite($f, $content);
        fclose($f);
    }

    private $_cachePath;
    private $_usedCache;
}
?>
]]></programlisting></informalexample>

      <para>
      The key here is to return from <methodname>start()</methodname> with either <constant>SKIPTAG</constant> or
      <constant>PROCEED</constant>.
      </para>

      <para>
      When <constant>SKIPTAG</constant> is returned, <acronym>PHPTAL</acronym> will just ignore the tag and call <methodname>end()</methodname>. This usually means that the trigger takes the hand in deciding what to show there.
      </para>

      <para>
      When <constant>PROCEED</constant> is returned, <acronym>PHPTAL</acronym> will execute the tag and its
      content as usual, then call end(). This allows our cache class to
      play with output buffers to execute the tag once and to store the
      result in a file which will be used in later calls.
      </para>

      <para>
      To install our trigger we use:
      </para>

      <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL.php';
require_once 'CacheTrigger.php'; // our custom trigger

$trigger = new CacheTrigger();

$tpl = new PHPTAL('test.xhtml');

// this trigger will only be called for phptal:id="triggerId"
$tpl->addTrigger('somePossiblyUniqueKeyword', $trigger);

$tpl->id = 1;

echo $tpl->execute();

?>
]]></programlisting></informalexample>

      <para>
      You can add as many triggers as you like to your templates.  A
      generic cache trigger may also handle more than one <sgmltag>phptal:id</sgmltag>…
      etc…
      </para>
    </section>

    <section id="translation-interface">
      <title>interface <classname>PHPTAL_TranslationService</classname></title>

      <para>
        <acronym>PHPTAL</acronym> comes with a default <productname>gettext</productname> translation service, as shown
      in another section. For some reason you may prefer to implement
      your own service of translation.
      </para>

      <para>
      The <classname>PHPTAL_TranslationService</classname> interface is here to serve your
      needs.
      </para>

      <para>
      The usage of your service will be the same as the
      <classname>PHPTAL_GetTextTranslator</classname>.
      </para>

      <informalexample><programlisting language="php"><![CDATA[$tpl->setTranslator($yourOwnTranslatorInstance);
]]></programlisting></informalexample>

      <para>
      Ihre Implementierung muß die folgenden Methoden definieren:
      </para>

      <section id="i18n-setlanguage">
        <title>method <methodname>setLanguage(<replaceable>…</replaceable>)</methodname></title>

        <para>
          Diese Methode kann durch die Vorlage aufgerufen werden, um die aktuelle Ausgabesprache zu ändern (z.B. <code>de_CH</code>).
        </para>

        <para>
          Die Argumente sind eine Liste möglicher Sprachen (verwenden Sie <function>func_get_args()</function>, um die Argumentliste zu erhalten). Ihr Dienst sollte dann die erste bekannte Sprache wählen.
        </para>

        <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL/TranslationService.php';

class MyTranslator implements PHPTAL_TranslationService {
…
    public function setLanguage(){
        $langs = func_get_args();
        foreach($langs as $lang){
            // if $lang known use it and stop the loop
            $this->_currentLang = $lang;
            break;
        }
        return $this->_currentLang;
    }
    …
    private $_currentLang;
}
?>
]]></programlisting></informalexample>
      </section>

      <section id="i18n-usedomain">
        <title>method <methodname>useDomain(<replaceable>$domain</replaceable>)</methodname></title>

        <para>
          If you decided to store your translations into separate files,
          one for each application, for example, this method allows you to
          select the translation domain from your templates (<sgmltag>i18n:domain</sgmltag>).
        </para>

        <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL/TranslationService.php';

class MyTranslator implements PHPTAL_TranslationService {
    …
    public function useDomain($domain){
        if (!array_key_exists($domain, $this->_domains)){
            $file = "domains/$this->_currentLang/$domain.php";
            $this->_domains[$domain] = include($file);
        }
        $this->_currentDomain = $this->_domains[$domain];
    }
    …
    private $_currentDomain;
    private $_domains = array();
}
?>
]]></programlisting></informalexample>

        <para>
          Das obige Beispiel ist eine möglich Übersetzungslösung, bei der die Schlüssel in <acronym>PHP</acronym>-Dateien gespeichert werden, die ein assoziatives key=&gt;translation-Feld zurückgeben.
        </para>
      </section>

      <section id="i18n-setvar">
        <title>method <methodname>setVar(<replaceable>$key</replaceable>,<replaceable>$value</replaceable>)</methodname></title>

        <para>
        This method matches <sgmltag>i18n:name</sgmltag> calls. It builds an interpolation
        context for later translate calls.
        </para>

        <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL/TranslationService.php';

class MyTranslator implements PHPTAL_TranslationService {
    …
    public function setVar($key, $value){
        $this->_context[$key] = $value;
    }
    …
    private $_context = array();
}
?>
]]></programlisting></informalexample>
      </section>

      <section id="i18n-translatekey">
        <title>method <methodname>translate(<replaceable>$key</replaceable>)</methodname></title>

        <para>
        The last and most important method to implement, it asks your
        service to translate the specified key for the currently selected
        language.
        </para>

        <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL/TranslationService.php';

class MyTranslator implements PHPTAL_TranslationService {
    …
    public function translate($key){
        $value = $this->_currentDomain[$key];

        // interpolate ${myvar} using context associative array
        while (preg_match('/\${(.*?)\}/sm', $value, $m)){
            list($src,$var) = $m;
            if (!array_key_exists($var, $this->_context)){
                $err = sprintf('Interpolation error, var "%s" not set',
                               $var);
                throw new Exception($err);
            }
            $value = str_replace($src, $this->_context[$var], $value);
        }

        return $value;
    }
    …
}
?>
]]></programlisting></informalexample>
      </section>

    </section> <!-- end of PHPTAL_TranslationService -->

    <section id="gettext"><?dbhtml stop-chunking?>
      <title>Die Arbeit mit <productname>gettext</productname></title>

      <para>
        <productname>gettext</productname> ist der <acronym>GNU</acronym>-Standard für das Internationalisierungs- und Übersetzungssystem. Es kann im Zusammenspiel mit <acronym>PHP</acronym> benutzt werden und wird von <acronym>PHPTAL</acronym> unterstüzt.
      </para>

      <para>
        Die Benutzung von <productname>gettext</productname> ist einfach, aber Sie sollten einige Tests durchführen, um sicherzustellen, daß auf ihrem Rechner alles richtig zusammenspielt.
      </para>

      <para>
        <acronym>PHP</acronym> muß mit dem <parameter>--with-gettext</parameter> Schalter kompiliert werden. Näheres dazu findet sich in der <acronym>PHP</acronym>-Dokumentation.
      </para>

      <para>
        Mit dem folgenden Stückchen Code können Sie ihre <acronym>PHP</acronym>-Installation daraufhin prüfen:
      </para>

      <informalexample><programlisting role="php"><![CDATA[
//
// test if gettext extension is installed with php
//

if (!function_exists("gettext"))
{
    echo "gettext is not installed\n";
}
else
{
    echo "gettext is supported\n";
}
]]></programlisting></informalexample>

      <section id="i18n-directory"><?dbhtml stop-chunking?>
        <title>Erzeugung der Übersetzungsverzeichnisstruktur (Hmpf)</title>

        <para>
          Die <acronym>PHP</acronym>-<productname>gettext</productname>-Erweiterung verlangt nach einer bestimmten Verzeichnisstruktur, die die Übersetzungsdateien enthält.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[/path/to/your/translation_root/en_US/LC_MESSAGES/
/path/to/your/translation_root/en_GB/LC_MESSAGES/
/path/to/your/translation_root/fr_FR/LC_MESSAGES/
/path/to/your/translation_root/es_ES/LC_MESSAGES/
… and so on …
]]></programlisting></informalexample>

        <para>
          Die Sprachkode besteht aus zwei Zeichen, die die eigentliche Sprache (fr, de, it, …) und zwei Zeichen, die das Land (FR, CH, DE, IT, …) festlegen.
        </para>

        <para>
          Das Verzeichnismuster sieht so aus:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[<path_to_where_you_want>/<ll_CC>/LC_MESSAGES/
]]></programlisting></informalexample>

      </section>

      <section id="po-files"><?dbhtml stop-chunking?>
        <title>Portable Object files</title>

        <para>
          PO-Dateien sind Klartextdateien, die die Übersetzungen enthalten. Sie können sie problemlos händisch editieren.
        </para>

        <para>
          minimalistisches po-Beispiel (<filename>en_US/LC_MESSAGES/mydomain.po</filename>):
        </para>

        <informalexample><programlisting language="xml"><![CDATA[msgid ""
msgstr ""
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Simple test"
msgstr "A small sentence in english"
]]></programlisting></informalexample>

        <para>
          Einmal bearbeitet, muß jede PO-Datei indiziert werden:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[msgfmt mydomain.po -o mydomain.mo
]]></programlisting></informalexample>

        <para>
          Dieser Aufruf funktioniert nur, wenn Sie die <productname>gettext</productname>-Werkzeuge auf ihrem System installiert haben.
        </para>

        <para>
          Hierdurch wird eine MO-Datei (machine object) erzeugt, in der Ihre Übersetzungen für einen schnellen Zugriff indiziert vorliegen.
        </para>

        <para>
          Nun müssen Sie diese Datei in die anderen gewünschten Sprachen übersetzen.
        </para>

        <para>
          Minimalistisches PO-Beispiel (<filename>fr_FR/LC_MESSAGES/mydomain.po</filename>):
        </para>

        <informalexample><programlisting language="po"><![CDATA[msgid ""
msgstr ""
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Simple test"
msgstr "Une petite phrase en français"
]]></programlisting></informalexample>

        <para>
          Auch diese Übersetzungsdatei muß indiziert werden:
        </para>

        <informalexample><programlisting language="sh"><![CDATA[msgfmt mydomain.po -o mydomain.mo
]]></programlisting></informalexample>

      </section>

      <section id="i18n-domains">
        <title>Translation Domain</title>

        <para>
        The domain is matched against your translation file names. In
        above examples we used 'mydomain' as domain name.
        </para>

        <para>
        You can have more than one domain for the same application, it
        can enhance <productname>gettext</productname>'s performance to split your application
        translations in more than one file.
        </para>
      </section>

      <section id="php-in-phptal">
        <title>Using Translator in <acronym>PHP</acronym></title>

        <informalexample><programlisting language="php"><![CDATA[<?php
require_once 'PHPTAL.php';
require_once 'PHPTAL/GetTextTranslator.php';

try {
    $tr = new PHPTAL_GetTextTranslator();

    // set language to use for this session (first valid language will
    // be used)
    $tr->setLanguage('en_GB.utf8', 'en_GB');

    // register gettext domain to use
    $tr->addDomain('mydomain', '/path/to/your/translation_root');

    // specify current domain
    $tr->useDomain('mydomain');

    $tpl = new PHPTAL('mytemplate.xhtml');

    // tell PHPTAL to use our translator
    $tpl->setTranslator($tr);

    // output translated template
    echo $tpl->execute();
}
catch (Exception $e){
    echo $e;
}
]]></programlisting></informalexample>

<para>If you need to translate some other text, that is not in the template (e.g. plaintext e-mail message), you can reuse PHPTAL's translator:</para>

<informalexample><programlisting language="php"><![CDATA[$tr = $tpl->getTranslator();

$subject = $tr->translate("Registration information");

$tr->setVar("user",$username);
$message = $tr->translate("Dear ${user}, thanks for registering!");

mail($email, $subject, $message);
]]></programlisting></informalexample>

<para>If you're using PHPTAL's standard <productname>gettext</productname> translator, you can use <methodname>gettext()</methodname> too.</para>

      </section>

      <section id="var-interpolation">
        <title>Variable interpolation</title>

        <para>
        The <acronym>I18N</acronym> Namensraum allows some variable interpolation in your
        translations.
        </para>

        <informalexample><programlisting language="xml"><![CDATA[
# english
msgid "welcome"
msgstr "Welcome ${name} you have ${n} mails!"

# french
msgid "welcome"
msgstr "Bienvenue ${name} vous avez recu ${n} messages!"
        ]]></programlisting></informalexample>

        <para>
        A template can use this interpolation as follows:
        </para>

        <informalexample><programlisting language="xml"><![CDATA[
<span i18n:translate="welcome">
  Welcome
  <span i18n:name="name" tal:replace="user/name"/>
  you currently have
  <span i18n:name="n" tal:replace="user/unreadeMails"/>
  unread messages!
</span>
        ]]></programlisting></informalexample>

        <para>
          Because <sgmltag>i18n:translate</sgmltag> contains a value <computeroutput>'welcome'</computeroutput>, the template
        data will be ignored and the message given by <productname>gettext</productname> will be
        used instead.
        </para>

      </section>

    </section>

    <section id="custom-modifiers">
      <title>Maßgeschneiderte Operatoren entwickeln</title>

      <para>
        <acronym>PHPTAL</acronym> enthält einige grundlegende Operatoren: „not:“, „exists:“,
        „string:“, „php:“, „path:“.
      </para>

      <para>
        Diese Operatoren sind in den <acronym>ZPT</acronym>-Spezifikationen definiert. <acronym>PHPTALES</acronym> kann mit eigenen Operatoren zur Bearbeitung von Zeichenketten, Kalenderdaten, Währungen, oder was auch immer erweitert werden.
      </para>

      <para>
        Ziel der Anwendung jedweden Operators ist es, ein Stückchen <acronym>PHP</acronym>-Code zurückzugeben, der in den aus der Vorlage generierte <acronym>PHP</acronym>-Code integriert wird.
      </para>

      <para>
        Operatoren werden während der Vorlagenzerlegung angewendet. Wenn Sie das Verhalten eines Operators verändern, müssen Sie alle vorher erzeugten <acronym>PHP</acronym>-Dateien löschen und die Vorlagen neu zerlegen lassen.
      </para>

      <para>
        Beachten Sie, daß Operatoren Code und keine Daten ausgeben!
      </para>

      <para>
        Jede <acronym>PHP</acronym>-Funktion, die mit "<constant>phptal_tales_</constant>" beginnt, definiert einen Operator.
      </para>

      <para>
        Operatoren erwarten zwei Argumente::
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <varname>$src</varname>: die Quellzeichenkette nach dem "modifier:" Schlüsselwort
          </para>
        </listitem>

        <listitem>
          <para>
            <varname>$nothrow</varname>: eine boolsche Variable, die entscheidet ob durch die <function>phptal_path()</function> Auflösung eine Ausnahme ausgeworfen werden soll. Diese Variable muß immer an innerhalb Ihres eigenen Operators aufgerufene weitere <function>phptal_tales_<replaceable>*</replaceable></function>-Operatoren durchgereicht werden.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        For example, in the following <acronym>TAL</acronym> template,
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<span tal:replace="some-modifier: my/path/value"/>
]]></programlisting></informalexample>

      <para>
        The src argument will be "<varname>my/path/value</varname>", and the <varname>$nothrow</varname> boolean will be false, because <sgmltag>tal:replace</sgmltag> requires the path to be fully resolvable.
      </para>

      <para>
        Ein Ausdruck wie:
      </para>

      <informalexample><programlisting language="xml"><![CDATA[<span tal:replace="some-modifier: my/path/value | other/path"/>
]]></programlisting></informalexample>

      <para>
        nutzt zwei Operatoren:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            some-modifier: with "<code>my/path/value</code>" as <varname>$src</varname> argument and <varname>$nothrow</varname> set to true because an alternative exists
          </para>
        </listitem>
        <listitem>
          <para>
            path: with "<code>other/path</code>" as <varname>$src</varname>, and <varname>$nothrow</varname> set to false because in case the alternative is not found, <sgmltag>tal:replace</sgmltag> will be in trouble.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Zur Erinnerung: <code>path:</code> wird implizit verwendet, sollte kein anderer Operator angegeben sein.
      </para>

      <para>
        Operatoren können andere Operatoren verwenden, um einfacheren PHP-Code zu erhalten; siehe das folgende Beispiel:
      </para>

      <informalexample><programlisting language="php"><![CDATA[
//
// This modifier will return a money formated string (XXX.XX)
//
// usage:
//
//      money: path/to/my/amount
//
// this modifier uses phptal_tales() function to generate the
// PHP code that will return the value of the modifier argument.
//
// in the example:
//
//      money: path/to/my/amount
//
// the produced code will be something looking like:
//
//      sprintf("%01.2f", phptal_path($ctx->path, "to/my/amount"))
//
// This code will be included right into the template where needed.
//
// @param string $src
//      The expression string
// @param string $nothrow
//      A boolean indicating if exceptions may be throw by phptal_path if
//      the path does not exists.
// @return string
//      PHP code to include in the template
//
function phptal_tales_money( $src, $nothrow )
{
    // remove spaces we do not require here
    $src = trim($src);
    return 'sprintf("%01.2f", '.phptal_tales($src, $nothrow).')';
}
]]></programlisting></informalexample>

    </section>

  </article>

  <appendix id="sysadmin">
    <title>Hinweis für Systembetreuer</title>
    <para>
      <acronym>PHPTAL</acronym> arbeitet, indem es <acronym>PHP</acronym>-Dateien aus der Vorlagenlogik generiert; das bedeutet, daß es ein Verzeichnis benötigt, in dem die erzeugten Dateien gespeichert und durch den <acronym>PHP</acronym> Interpreter zerlegt werden können.
    </para>

    <para>
      In der Grundeinstellung verwendet <acronym>PHPTAL</acronym>, falls vorhanden, die <acronym>PHP</acronym>-Funktion <function>sys_get_temp_dir()</function>, um das temporäre Verzeichnis zu bestimmen, in dem die generierten <acronym>PHP</acronym>-Dateien gespeichert werden. Sonst wird auf unixartigen Systemen <filename>/tmp</filename> und auf Microsoft Systemen <filename>c:\windows\temp</filename> verwendet. Sie können die Grundeinstellung durch den Aufruf von <methodname>setPhpCodeDestination()</methodname> mit einem passenden Pfad nach ihren Wünschen ändern. Sei es das übliche temporäre Verzeichnis, sei es ein eigenes: seine Zugriffsrechte müssen so gesetzt sein, daß der <acronym>PHP</acronym> ausführenden Prozess (d.h. der Apache Betreiber wenn das mod_php Modul verwendet wird, sonst der cgi/fastcgi Betreiber) Dateien anlegen und verändern kann.
    </para>

    <para>
      <acronym>PHPTAL</acronym> erzeugt zu jeder Vorlagendatei und, falls <sgmltag>phptal:cache</sgmltag> verwendet wird, auch für jedes Element  eine (php) Datei. Für Makros werden keine separaten Dateien angelegt. (Sie werden einfach als <acronym>PHP</acronym>-Funktionen in die erzeugte Datei eingefügt.) Diese Dateien werden ab und an automatisch gelöscht, genauer: jedes mal, wenn eine Vorlage bearbeitet wird, wird die alte Datei mit einer gewissen durch <methodname>setCachePurgeFrequency()</methodname> bestimmten Wahrscheinlichkeit gelöscht, falls ihre durch <methodname>setCacheLifetime()</methodname> festgelegte Lebensdauer abgelaufen ist.
    </para>

    <para>
      Natürlich kann man alte bzw. unbenutzte Dateien auch via cron-Job und Shell löschen (hier: UNIXartige Shell):
    </para>

    <informalexample><programlisting>find /tmp/ -name tpl_\* \( -atime +1 -o -mtime +14 \) -delete</programlisting></informalexample>
  </appendix>
  <appendix id="usefullinks">
    <title>Nützliche Verweise</title>

    <itemizedlist>
      <listitem><para>
        <ulink url="http://www.zope.org/Wikis/Projects/ZPT/"><acronym>ZPT</acronym></ulink> Zope Page Templates,
      </para></listitem>
      <listitem><para>
        <ulink url="http://www.zope.org/Wikis/DevSite/Projects/ZPT/TAL/"><acronym>TAL</acronym></ulink> Template Attribute Language,
      </para></listitem>
      <listitem><para>
        <ulink url="http://www.zope.org/Wikis/DevSite/Projects/ZPT/METAL"><acronym>METAL</acronym></ulink>, die Makroerweiterung zu <acronym>TAL</acronym>,
      </para></listitem>
      <listitem><para>
        <ulink url="http://www.zope.org/Wikis/DevSite/Projects/ZPT/TALES"><acronym>TALES</acronym></ulink>, die Definition der <acronym>TAL</acronym>-Ausdrücke.
      </para></listitem>
    </itemizedlist>
  </appendix>

  <appendix id="greetings">
    <title>Danksagungen</title>

    <para>Vielen Dank an:</para>

    <itemizedlist>
      <listitem><para>
        Das <acronym>ZPT</acronym>-Team, das diese nützlichen Spezifikationen entwickelt hat,
      </para></listitem>
      <listitem><para>
        die <acronym>PHPTAL</acronym>-Gemeinschaft für ihre Unterstützung, Hilfe und ihre Hinweise,
      </para></listitem>
      <listitem><para>
        Jean-Michel Hiver, der mich zum Draufschauen 'zwang',
      </para></listitem>
      <listitem><para>
        Olivier Parisy, den ersten enthusiastischen <acronym>PHPTAL</acronym>-Benutzer und Bug Finder,
      </para></listitem>
    </itemizedlist>
  </appendix>
</book>
<!-- vim: set enc=utf8 sw=2 ts=2 sts=2 si et :-->
